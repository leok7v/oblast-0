/* DO NOT EDIT. THIS FILE IS GENERATED BY generate.c */

#define CL_FUNCTION_NOT_IMPLEMENTED -255

extern void* clBindFunction(const char* name);

cl_int clGetPlatformIDs(cl_uint          num_entries,
                 cl_platform_id * platforms,
                 cl_uint *        num_platforms) {
    typedef cl_int (*clGetPlatformIDs_t)(cl_uint          num_entries,
                 cl_platform_id * platforms,
                 cl_uint *        num_platforms);
    static clGetPlatformIDs_t f;
    if (f == null) { f = (clGetPlatformIDs_t)clBindFunction("clGetPlatformIDs"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(num_entries, platforms, num_platforms);
}

cl_int clGetPlatformInfo(cl_platform_id   platform,
                  cl_platform_info param_name,
                  size_t           param_value_size,
                  void *           param_value,
                  size_t *         param_value_size_ret) {
    typedef cl_int (*clGetPlatformInfo_t)(cl_platform_id   platform,
                  cl_platform_info param_name,
                  size_t           param_value_size,
                  void *           param_value,
                  size_t *         param_value_size_ret);
    static clGetPlatformInfo_t f;
    if (f == null) { f = (clGetPlatformInfo_t)clBindFunction("clGetPlatformInfo"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(platform, param_name, param_value_size, param_value, param_value_size_ret);
}

cl_int clGetDeviceIDs(cl_platform_id   platform,
               cl_device_type   device_type,
               cl_uint          num_entries,
               cl_device_id *   devices,
               cl_uint *        num_devices) {
    typedef cl_int (*clGetDeviceIDs_t)(cl_platform_id   platform,
               cl_device_type   device_type,
               cl_uint          num_entries,
               cl_device_id *   devices,
               cl_uint *        num_devices);
    static clGetDeviceIDs_t f;
    if (f == null) { f = (clGetDeviceIDs_t)clBindFunction("clGetDeviceIDs"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(platform, device_type, num_entries, devices, num_devices);
}

cl_int clGetDeviceInfo(cl_device_id    device,
                cl_device_info  param_name,
                size_t          param_value_size,
                void *          param_value,
                size_t *        param_value_size_ret) {
    typedef cl_int (*clGetDeviceInfo_t)(cl_device_id    device,
                cl_device_info  param_name,
                size_t          param_value_size,
                void *          param_value,
                size_t *        param_value_size_ret);
    static clGetDeviceInfo_t f;
    if (f == null) { f = (clGetDeviceInfo_t)clBindFunction("clGetDeviceInfo"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(device, param_name, param_value_size, param_value, param_value_size_ret);
}

cl_int clCreateSubDevices(cl_device_id                         in_device,
                   const cl_device_partition_property * properties,
                   cl_uint                              num_devices,
                   cl_device_id *                       out_devices,
                   cl_uint *                            num_devices_ret) {
    typedef cl_int (*clCreateSubDevices_t)(cl_device_id                         in_device,
                   const cl_device_partition_property * properties,
                   cl_uint                              num_devices,
                   cl_device_id *                       out_devices,
                   cl_uint *                            num_devices_ret);
    static clCreateSubDevices_t f;
    if (f == null) { f = (clCreateSubDevices_t)clBindFunction("clCreateSubDevices"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(in_device, properties, num_devices, out_devices, num_devices_ret);
}

cl_int clRetainDevice(cl_device_id device) {
    typedef cl_int (*clRetainDevice_t)(cl_device_id device);
    static clRetainDevice_t f;
    if (f == null) { f = (clRetainDevice_t)clBindFunction("clRetainDevice"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(device);
}

cl_int clReleaseDevice(cl_device_id device) {
    typedef cl_int (*clReleaseDevice_t)(cl_device_id device);
    static clReleaseDevice_t f;
    if (f == null) { f = (clReleaseDevice_t)clBindFunction("clReleaseDevice"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(device);
}

cl_int clSetDefaultDeviceCommandQueue(cl_context           context,
                               cl_device_id         device,
                               cl_command_queue     command_queue) {
    typedef cl_int (*clSetDefaultDeviceCommandQueue_t)(cl_context           context,
                               cl_device_id         device,
                               cl_command_queue     command_queue);
    static clSetDefaultDeviceCommandQueue_t f;
    if (f == null) { f = (clSetDefaultDeviceCommandQueue_t)clBindFunction("clSetDefaultDeviceCommandQueue"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(context, device, command_queue);
}

cl_int clGetDeviceAndHostTimer(cl_device_id    device,
                        cl_ulong*       device_timestamp,
                        cl_ulong*       host_timestamp) {
    typedef cl_int (*clGetDeviceAndHostTimer_t)(cl_device_id    device,
                        cl_ulong*       device_timestamp,
                        cl_ulong*       host_timestamp);
    static clGetDeviceAndHostTimer_t f;
    if (f == null) { f = (clGetDeviceAndHostTimer_t)clBindFunction("clGetDeviceAndHostTimer"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(device, device_timestamp, host_timestamp);
}

cl_int clGetHostTimer(cl_device_id device,
               cl_ulong *   host_timestamp) {
    typedef cl_int (*clGetHostTimer_t)(cl_device_id device,
               cl_ulong *   host_timestamp);
    static clGetHostTimer_t f;
    if (f == null) { f = (clGetHostTimer_t)clBindFunction("clGetHostTimer"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(device, host_timestamp);
}

cl_context clCreateContext(const cl_context_properties * properties,
                cl_uint              num_devices,
                const cl_device_id * devices,
                void (CL_CALLBACK * pfn_notify)(const char * errinfo,
                                                const void * private_info,
                                                size_t       cb,
                                                void *       user_data),
                void *               user_data,
                cl_int *             errcode_ret) {
    typedef cl_context (*clCreateContext_t)(const cl_context_properties * properties,
                cl_uint              num_devices,
                const cl_device_id * devices,
                void (CL_CALLBACK * pfn_notify)(const char * errinfo,
                                                const void * private_info,
                                                size_t       cb,
                                                void *       user_data),
                void *               user_data,
                cl_int *             errcode_ret);
    static clCreateContext_t f;
    if (f == null) { f = (clCreateContext_t)clBindFunction("clCreateContext"); }
    return f == null ? ((void*)0) :
        f(properties, num_devices, devices, pfn_notify, user_data, errcode_ret);
}

cl_context clCreateContextFromType(const cl_context_properties * properties,
                        cl_device_type      device_type,
                        void (CL_CALLBACK * pfn_notify)(const char * errinfo,
                                                        const void * private_info,
                                                        size_t       cb,
                                                        void *       user_data),
                        void *              user_data,
                        cl_int *            errcode_ret) {
    typedef cl_context (*clCreateContextFromType_t)(const cl_context_properties * properties,
                        cl_device_type      device_type,
                        void (CL_CALLBACK * pfn_notify)(const char * errinfo,
                                                        const void * private_info,
                                                        size_t       cb,
                                                        void *       user_data),
                        void *              user_data,
                        cl_int *            errcode_ret);
    static clCreateContextFromType_t f;
    if (f == null) { f = (clCreateContextFromType_t)clBindFunction("clCreateContextFromType"); }
    return f == null ? ((void*)0) :
        f(properties, device_type, pfn_notify, user_data, errcode_ret);
}

cl_int clRetainContext(cl_context context) {
    typedef cl_int (*clRetainContext_t)(cl_context context);
    static clRetainContext_t f;
    if (f == null) { f = (clRetainContext_t)clBindFunction("clRetainContext"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(context);
}

cl_int clReleaseContext(cl_context context) {
    typedef cl_int (*clReleaseContext_t)(cl_context context);
    static clReleaseContext_t f;
    if (f == null) { f = (clReleaseContext_t)clBindFunction("clReleaseContext"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(context);
}

cl_int clGetContextInfo(cl_context         context,
                 cl_context_info    param_name,
                 size_t             param_value_size,
                 void *             param_value,
                 size_t *           param_value_size_ret) {
    typedef cl_int (*clGetContextInfo_t)(cl_context         context,
                 cl_context_info    param_name,
                 size_t             param_value_size,
                 void *             param_value,
                 size_t *           param_value_size_ret);
    static clGetContextInfo_t f;
    if (f == null) { f = (clGetContextInfo_t)clBindFunction("clGetContextInfo"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(context, param_name, param_value_size, param_value, param_value_size_ret);
}

cl_int clSetContextDestructorCallback(cl_context         context,
                               void (CL_CALLBACK* pfn_notify)(cl_context context,
                                                              void* user_data),
                               void*              user_data) {
    typedef cl_int (*clSetContextDestructorCallback_t)(cl_context         context,
                               void (CL_CALLBACK* pfn_notify)(cl_context context,
                                                              void* user_data),
                               void*              user_data);
    static clSetContextDestructorCallback_t f;
    if (f == null) { f = (clSetContextDestructorCallback_t)clBindFunction("clSetContextDestructorCallback"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(context, pfn_notify, user_data);
}

cl_command_queue clCreateCommandQueueWithProperties(cl_context               context,
                                   cl_device_id             device,
                                   const cl_queue_properties *    properties,
                                   cl_int *                 errcode_ret) {
    typedef cl_command_queue (*clCreateCommandQueueWithProperties_t)(cl_context               context,
                                   cl_device_id             device,
                                   const cl_queue_properties *    properties,
                                   cl_int *                 errcode_ret);
    static clCreateCommandQueueWithProperties_t f;
    if (f == null) { f = (clCreateCommandQueueWithProperties_t)clBindFunction("clCreateCommandQueueWithProperties"); }
    return f == null ? ((void*)0) :
        f(context, device, properties, errcode_ret);
}

cl_int clRetainCommandQueue(cl_command_queue command_queue) {
    typedef cl_int (*clRetainCommandQueue_t)(cl_command_queue command_queue);
    static clRetainCommandQueue_t f;
    if (f == null) { f = (clRetainCommandQueue_t)clBindFunction("clRetainCommandQueue"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue);
}

cl_int clReleaseCommandQueue(cl_command_queue command_queue) {
    typedef cl_int (*clReleaseCommandQueue_t)(cl_command_queue command_queue);
    static clReleaseCommandQueue_t f;
    if (f == null) { f = (clReleaseCommandQueue_t)clBindFunction("clReleaseCommandQueue"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue);
}

cl_int clGetCommandQueueInfo(cl_command_queue      command_queue,
                      cl_command_queue_info param_name,
                      size_t                param_value_size,
                      void *                param_value,
                      size_t *              param_value_size_ret) {
    typedef cl_int (*clGetCommandQueueInfo_t)(cl_command_queue      command_queue,
                      cl_command_queue_info param_name,
                      size_t                param_value_size,
                      void *                param_value,
                      size_t *              param_value_size_ret);
    static clGetCommandQueueInfo_t f;
    if (f == null) { f = (clGetCommandQueueInfo_t)clBindFunction("clGetCommandQueueInfo"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, param_name, param_value_size, param_value, param_value_size_ret);
}

cl_mem clCreateBuffer(cl_context   context,
               cl_mem_flags flags,
               size_t       size,
               void *       host_ptr,
               cl_int *     errcode_ret) {
    typedef cl_mem (*clCreateBuffer_t)(cl_context   context,
               cl_mem_flags flags,
               size_t       size,
               void *       host_ptr,
               cl_int *     errcode_ret);
    static clCreateBuffer_t f;
    if (f == null) { f = (clCreateBuffer_t)clBindFunction("clCreateBuffer"); }
    return f == null ? ((void*)0) :
        f(context, flags, size, host_ptr, errcode_ret);
}

cl_mem clCreateSubBuffer(cl_mem                   buffer,
                  cl_mem_flags             flags,
                  cl_buffer_create_type    buffer_create_type,
                  const void *             buffer_create_info,
                  cl_int *                 errcode_ret) {
    typedef cl_mem (*clCreateSubBuffer_t)(cl_mem                   buffer,
                  cl_mem_flags             flags,
                  cl_buffer_create_type    buffer_create_type,
                  const void *             buffer_create_info,
                  cl_int *                 errcode_ret);
    static clCreateSubBuffer_t f;
    if (f == null) { f = (clCreateSubBuffer_t)clBindFunction("clCreateSubBuffer"); }
    return f == null ? ((void*)0) :
        f(buffer, flags, buffer_create_type, buffer_create_info, errcode_ret);
}

cl_mem clCreateImage(cl_context              context,
              cl_mem_flags            flags,
              const cl_image_format * image_format,
              const cl_image_desc *   image_desc,
              void *                  host_ptr,
              cl_int *                errcode_ret) {
    typedef cl_mem (*clCreateImage_t)(cl_context              context,
              cl_mem_flags            flags,
              const cl_image_format * image_format,
              const cl_image_desc *   image_desc,
              void *                  host_ptr,
              cl_int *                errcode_ret);
    static clCreateImage_t f;
    if (f == null) { f = (clCreateImage_t)clBindFunction("clCreateImage"); }
    return f == null ? ((void*)0) :
        f(context, flags, image_format, image_desc, host_ptr, errcode_ret);
}

cl_mem clCreatePipe(cl_context                 context,
             cl_mem_flags               flags,
             cl_uint                    pipe_packet_size,
             cl_uint                    pipe_max_packets,
             const cl_pipe_properties * properties,
             cl_int *                   errcode_ret) {
    typedef cl_mem (*clCreatePipe_t)(cl_context                 context,
             cl_mem_flags               flags,
             cl_uint                    pipe_packet_size,
             cl_uint                    pipe_max_packets,
             const cl_pipe_properties * properties,
             cl_int *                   errcode_ret);
    static clCreatePipe_t f;
    if (f == null) { f = (clCreatePipe_t)clBindFunction("clCreatePipe"); }
    return f == null ? ((void*)0) :
        f(context, flags, pipe_packet_size, pipe_max_packets, properties, errcode_ret);
}

cl_mem clCreateBufferWithProperties(cl_context                context,
                             const cl_mem_properties * properties,
                             cl_mem_flags              flags,
                             size_t                    size,
                             void *                    host_ptr,
                             cl_int *                  errcode_ret) {
    typedef cl_mem (*clCreateBufferWithProperties_t)(cl_context                context,
                             const cl_mem_properties * properties,
                             cl_mem_flags              flags,
                             size_t                    size,
                             void *                    host_ptr,
                             cl_int *                  errcode_ret);
    static clCreateBufferWithProperties_t f;
    if (f == null) { f = (clCreateBufferWithProperties_t)clBindFunction("clCreateBufferWithProperties"); }
    return f == null ? ((void*)0) :
        f(context, properties, flags, size, host_ptr, errcode_ret);
}

cl_mem clCreateImageWithProperties(cl_context                context,
                            const cl_mem_properties * properties,
                            cl_mem_flags              flags,
                            const cl_image_format *   image_format,
                            const cl_image_desc *     image_desc,
                            void *                    host_ptr,
                            cl_int *                  errcode_ret) {
    typedef cl_mem (*clCreateImageWithProperties_t)(cl_context                context,
                            const cl_mem_properties * properties,
                            cl_mem_flags              flags,
                            const cl_image_format *   image_format,
                            const cl_image_desc *     image_desc,
                            void *                    host_ptr,
                            cl_int *                  errcode_ret);
    static clCreateImageWithProperties_t f;
    if (f == null) { f = (clCreateImageWithProperties_t)clBindFunction("clCreateImageWithProperties"); }
    return f == null ? ((void*)0) :
        f(context, properties, flags, image_format, image_desc, host_ptr, errcode_ret);
}

cl_int clRetainMemObject(cl_mem memobj) {
    typedef cl_int (*clRetainMemObject_t)(cl_mem memobj);
    static clRetainMemObject_t f;
    if (f == null) { f = (clRetainMemObject_t)clBindFunction("clRetainMemObject"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(memobj);
}

cl_int clReleaseMemObject(cl_mem memobj) {
    typedef cl_int (*clReleaseMemObject_t)(cl_mem memobj);
    static clReleaseMemObject_t f;
    if (f == null) { f = (clReleaseMemObject_t)clBindFunction("clReleaseMemObject"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(memobj);
}

cl_int clGetSupportedImageFormats(cl_context           context,
                           cl_mem_flags         flags,
                           cl_mem_object_type   image_type,
                           cl_uint              num_entries,
                           cl_image_format *    image_formats,
                           cl_uint *            num_image_formats) {
    typedef cl_int (*clGetSupportedImageFormats_t)(cl_context           context,
                           cl_mem_flags         flags,
                           cl_mem_object_type   image_type,
                           cl_uint              num_entries,
                           cl_image_format *    image_formats,
                           cl_uint *            num_image_formats);
    static clGetSupportedImageFormats_t f;
    if (f == null) { f = (clGetSupportedImageFormats_t)clBindFunction("clGetSupportedImageFormats"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(context, flags, image_type, num_entries, image_formats, num_image_formats);
}

cl_int clGetMemObjectInfo(cl_mem           memobj,
                   cl_mem_info      param_name,
                   size_t           param_value_size,
                   void *           param_value,
                   size_t *         param_value_size_ret) {
    typedef cl_int (*clGetMemObjectInfo_t)(cl_mem           memobj,
                   cl_mem_info      param_name,
                   size_t           param_value_size,
                   void *           param_value,
                   size_t *         param_value_size_ret);
    static clGetMemObjectInfo_t f;
    if (f == null) { f = (clGetMemObjectInfo_t)clBindFunction("clGetMemObjectInfo"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(memobj, param_name, param_value_size, param_value, param_value_size_ret);
}

cl_int clGetImageInfo(cl_mem           image,
               cl_image_info    param_name,
               size_t           param_value_size,
               void *           param_value,
               size_t *         param_value_size_ret) {
    typedef cl_int (*clGetImageInfo_t)(cl_mem           image,
               cl_image_info    param_name,
               size_t           param_value_size,
               void *           param_value,
               size_t *         param_value_size_ret);
    static clGetImageInfo_t f;
    if (f == null) { f = (clGetImageInfo_t)clBindFunction("clGetImageInfo"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(image, param_name, param_value_size, param_value, param_value_size_ret);
}

cl_int clGetPipeInfo(cl_mem           pipe,
              cl_pipe_info     param_name,
              size_t           param_value_size,
              void *           param_value,
              size_t *         param_value_size_ret) {
    typedef cl_int (*clGetPipeInfo_t)(cl_mem           pipe,
              cl_pipe_info     param_name,
              size_t           param_value_size,
              void *           param_value,
              size_t *         param_value_size_ret);
    static clGetPipeInfo_t f;
    if (f == null) { f = (clGetPipeInfo_t)clBindFunction("clGetPipeInfo"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(pipe, param_name, param_value_size, param_value, param_value_size_ret);
}

cl_int clSetMemObjectDestructorCallback(cl_mem memobj,
                                 void (CL_CALLBACK * pfn_notify)(cl_mem memobj,
                                                                 void * user_data),
                                 void * user_data) {
    typedef cl_int (*clSetMemObjectDestructorCallback_t)(cl_mem memobj,
                                 void (CL_CALLBACK * pfn_notify)(cl_mem memobj,
                                                                 void * user_data),
                                 void * user_data);
    static clSetMemObjectDestructorCallback_t f;
    if (f == null) { f = (clSetMemObjectDestructorCallback_t)clBindFunction("clSetMemObjectDestructorCallback"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(memobj, pfn_notify, user_data);
}

void * clSVMAlloc(cl_context       context,
           cl_svm_mem_flags flags,
           size_t           size,
           cl_uint          alignment) {
    typedef void * (*clSVMAlloc_t)(cl_context       context,
           cl_svm_mem_flags flags,
           size_t           size,
           cl_uint          alignment);
    static clSVMAlloc_t f;
    if (f == null) { f = (clSVMAlloc_t)clBindFunction("clSVMAlloc"); }
    return f == null ? ((void*)0) :
        f(context, flags, size, alignment);
}

void clSVMFree(cl_context        context,
          void *            svm_pointer) {
    typedef void (*clSVMFree_t)(cl_context        context,
          void *            svm_pointer);
    static clSVMFree_t f;
    if (f == null) { f = (clSVMFree_t)clBindFunction("clSVMFree"); }
    f(context, svm_pointer);
}

cl_sampler clCreateSamplerWithProperties(cl_context                     context,
                              const cl_sampler_properties *  sampler_properties,
                              cl_int *                       errcode_ret) {
    typedef cl_sampler (*clCreateSamplerWithProperties_t)(cl_context                     context,
                              const cl_sampler_properties *  sampler_properties,
                              cl_int *                       errcode_ret);
    static clCreateSamplerWithProperties_t f;
    if (f == null) { f = (clCreateSamplerWithProperties_t)clBindFunction("clCreateSamplerWithProperties"); }
    return f == null ? ((void*)0) :
        f(context, sampler_properties, errcode_ret);
}

cl_int clRetainSampler(cl_sampler sampler) {
    typedef cl_int (*clRetainSampler_t)(cl_sampler sampler);
    static clRetainSampler_t f;
    if (f == null) { f = (clRetainSampler_t)clBindFunction("clRetainSampler"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(sampler);
}

cl_int clReleaseSampler(cl_sampler sampler) {
    typedef cl_int (*clReleaseSampler_t)(cl_sampler sampler);
    static clReleaseSampler_t f;
    if (f == null) { f = (clReleaseSampler_t)clBindFunction("clReleaseSampler"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(sampler);
}

cl_int clGetSamplerInfo(cl_sampler         sampler,
                 cl_sampler_info    param_name,
                 size_t             param_value_size,
                 void *             param_value,
                 size_t *           param_value_size_ret) {
    typedef cl_int (*clGetSamplerInfo_t)(cl_sampler         sampler,
                 cl_sampler_info    param_name,
                 size_t             param_value_size,
                 void *             param_value,
                 size_t *           param_value_size_ret);
    static clGetSamplerInfo_t f;
    if (f == null) { f = (clGetSamplerInfo_t)clBindFunction("clGetSamplerInfo"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(sampler, param_name, param_value_size, param_value, param_value_size_ret);
}

cl_program clCreateProgramWithSource(cl_context        context,
                          cl_uint           count,
                          const char **     strings,
                          const size_t *    lengths,
                          cl_int *          errcode_ret) {
    typedef cl_program (*clCreateProgramWithSource_t)(cl_context        context,
                          cl_uint           count,
                          const char **     strings,
                          const size_t *    lengths,
                          cl_int *          errcode_ret);
    static clCreateProgramWithSource_t f;
    if (f == null) { f = (clCreateProgramWithSource_t)clBindFunction("clCreateProgramWithSource"); }
    return f == null ? ((void*)0) :
        f(context, count, strings, lengths, errcode_ret);
}

cl_program clCreateProgramWithBinary(cl_context                     context,
                          cl_uint                        num_devices,
                          const cl_device_id *           device_list,
                          const size_t *                 lengths,
                          const unsigned char **         binaries,
                          cl_int *                       binary_status,
                          cl_int *                       errcode_ret) {
    typedef cl_program (*clCreateProgramWithBinary_t)(cl_context                     context,
                          cl_uint                        num_devices,
                          const cl_device_id *           device_list,
                          const size_t *                 lengths,
                          const unsigned char **         binaries,
                          cl_int *                       binary_status,
                          cl_int *                       errcode_ret);
    static clCreateProgramWithBinary_t f;
    if (f == null) { f = (clCreateProgramWithBinary_t)clBindFunction("clCreateProgramWithBinary"); }
    return f == null ? ((void*)0) :
        f(context, num_devices, device_list, lengths, binaries, binary_status, errcode_ret);
}

cl_program clCreateProgramWithBuiltInKernels(cl_context            context,
                                  cl_uint               num_devices,
                                  const cl_device_id *  device_list,
                                  const char *          kernel_names,
                                  cl_int *              errcode_ret) {
    typedef cl_program (*clCreateProgramWithBuiltInKernels_t)(cl_context            context,
                                  cl_uint               num_devices,
                                  const cl_device_id *  device_list,
                                  const char *          kernel_names,
                                  cl_int *              errcode_ret);
    static clCreateProgramWithBuiltInKernels_t f;
    if (f == null) { f = (clCreateProgramWithBuiltInKernels_t)clBindFunction("clCreateProgramWithBuiltInKernels"); }
    return f == null ? ((void*)0) :
        f(context, num_devices, device_list, kernel_names, errcode_ret);
}

cl_program clCreateProgramWithIL(cl_context    context,
                     const void*    il,
                     size_t         length,
                     cl_int*        errcode_ret) {
    typedef cl_program (*clCreateProgramWithIL_t)(cl_context    context,
                     const void*    il,
                     size_t         length,
                     cl_int*        errcode_ret);
    static clCreateProgramWithIL_t f;
    if (f == null) { f = (clCreateProgramWithIL_t)clBindFunction("clCreateProgramWithIL"); }
    return f == null ? ((void*)0) :
        f(context, il, length, errcode_ret);
}

cl_int clRetainProgram(cl_program program) {
    typedef cl_int (*clRetainProgram_t)(cl_program program);
    static clRetainProgram_t f;
    if (f == null) { f = (clRetainProgram_t)clBindFunction("clRetainProgram"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(program);
}

cl_int clReleaseProgram(cl_program program) {
    typedef cl_int (*clReleaseProgram_t)(cl_program program);
    static clReleaseProgram_t f;
    if (f == null) { f = (clReleaseProgram_t)clBindFunction("clReleaseProgram"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(program);
}

cl_int clBuildProgram(cl_program           program,
               cl_uint              num_devices,
               const cl_device_id * device_list,
               const char *         options,
               void (CL_CALLBACK *  pfn_notify)(cl_program program,
                                                void * user_data),
               void *               user_data) {
    typedef cl_int (*clBuildProgram_t)(cl_program           program,
               cl_uint              num_devices,
               const cl_device_id * device_list,
               const char *         options,
               void (CL_CALLBACK *  pfn_notify)(cl_program program,
                                                void * user_data),
               void *               user_data);
    static clBuildProgram_t f;
    if (f == null) { f = (clBuildProgram_t)clBindFunction("clBuildProgram"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(program, num_devices, device_list, options, pfn_notify, user_data);
}

cl_int clCompileProgram(cl_program           program,
                 cl_uint              num_devices,
                 const cl_device_id * device_list,
                 const char *         options,
                 cl_uint              num_input_headers,
                 const cl_program *   input_headers,
                 const char **        header_include_names,
                 void (CL_CALLBACK *  pfn_notify)(cl_program program,
                                                  void * user_data),
                 void *               user_data) {
    typedef cl_int (*clCompileProgram_t)(cl_program           program,
                 cl_uint              num_devices,
                 const cl_device_id * device_list,
                 const char *         options,
                 cl_uint              num_input_headers,
                 const cl_program *   input_headers,
                 const char **        header_include_names,
                 void (CL_CALLBACK *  pfn_notify)(cl_program program,
                                                  void * user_data),
                 void *               user_data);
    static clCompileProgram_t f;
    if (f == null) { f = (clCompileProgram_t)clBindFunction("clCompileProgram"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(program, num_devices, device_list, options, num_input_headers, input_headers, header_include_names, pfn_notify, user_data);
}

cl_program clLinkProgram(cl_context           context,
              cl_uint              num_devices,
              const cl_device_id * device_list,
              const char *         options,
              cl_uint              num_input_programs,
              const cl_program *   input_programs,
              void (CL_CALLBACK *  pfn_notify)(cl_program program,
                                               void * user_data),
              void *               user_data,
              cl_int *             errcode_ret) {
    typedef cl_program (*clLinkProgram_t)(cl_context           context,
              cl_uint              num_devices,
              const cl_device_id * device_list,
              const char *         options,
              cl_uint              num_input_programs,
              const cl_program *   input_programs,
              void (CL_CALLBACK *  pfn_notify)(cl_program program,
                                               void * user_data),
              void *               user_data,
              cl_int *             errcode_ret);
    static clLinkProgram_t f;
    if (f == null) { f = (clLinkProgram_t)clBindFunction("clLinkProgram"); }
    return f == null ? ((void*)0) :
        f(context, num_devices, device_list, options, num_input_programs, input_programs, pfn_notify, user_data, errcode_ret);
}

cl_int clSetProgramSpecializationConstant(cl_program  program,
                                   cl_uint     spec_id,
                                   size_t      spec_size,
                                   const void* spec_value) {
    typedef cl_int (*clSetProgramSpecializationConstant_t)(cl_program  program,
                                   cl_uint     spec_id,
                                   size_t      spec_size,
                                   const void* spec_value);
    static clSetProgramSpecializationConstant_t f;
    if (f == null) { f = (clSetProgramSpecializationConstant_t)clBindFunction("clSetProgramSpecializationConstant"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(program, spec_id, spec_size, spec_value);
}

cl_int clUnloadPlatformCompiler(cl_platform_id platform) {
    typedef cl_int (*clUnloadPlatformCompiler_t)(cl_platform_id platform);
    static clUnloadPlatformCompiler_t f;
    if (f == null) { f = (clUnloadPlatformCompiler_t)clBindFunction("clUnloadPlatformCompiler"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(platform);
}

cl_int clGetProgramInfo(cl_program         program,
                 cl_program_info    param_name,
                 size_t             param_value_size,
                 void *             param_value,
                 size_t *           param_value_size_ret) {
    typedef cl_int (*clGetProgramInfo_t)(cl_program         program,
                 cl_program_info    param_name,
                 size_t             param_value_size,
                 void *             param_value,
                 size_t *           param_value_size_ret);
    static clGetProgramInfo_t f;
    if (f == null) { f = (clGetProgramInfo_t)clBindFunction("clGetProgramInfo"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(program, param_name, param_value_size, param_value, param_value_size_ret);
}

cl_int clGetProgramBuildInfo(cl_program            program,
                      cl_device_id          device,
                      cl_program_build_info param_name,
                      size_t                param_value_size,
                      void *                param_value,
                      size_t *              param_value_size_ret) {
    typedef cl_int (*clGetProgramBuildInfo_t)(cl_program            program,
                      cl_device_id          device,
                      cl_program_build_info param_name,
                      size_t                param_value_size,
                      void *                param_value,
                      size_t *              param_value_size_ret);
    static clGetProgramBuildInfo_t f;
    if (f == null) { f = (clGetProgramBuildInfo_t)clBindFunction("clGetProgramBuildInfo"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(program, device, param_name, param_value_size, param_value, param_value_size_ret);
}

cl_kernel clCreateKernel(cl_program      program,
               const char *    kernel_name,
               cl_int *        errcode_ret) {
    typedef cl_kernel (*clCreateKernel_t)(cl_program      program,
               const char *    kernel_name,
               cl_int *        errcode_ret);
    static clCreateKernel_t f;
    if (f == null) { f = (clCreateKernel_t)clBindFunction("clCreateKernel"); }
    return f == null ? ((void*)0) :
        f(program, kernel_name, errcode_ret);
}

cl_int clCreateKernelsInProgram(cl_program     program,
                         cl_uint        num_kernels,
                         cl_kernel *    kernels,
                         cl_uint *      num_kernels_ret) {
    typedef cl_int (*clCreateKernelsInProgram_t)(cl_program     program,
                         cl_uint        num_kernels,
                         cl_kernel *    kernels,
                         cl_uint *      num_kernels_ret);
    static clCreateKernelsInProgram_t f;
    if (f == null) { f = (clCreateKernelsInProgram_t)clBindFunction("clCreateKernelsInProgram"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(program, num_kernels, kernels, num_kernels_ret);
}

cl_kernel clCloneKernel(cl_kernel     source_kernel,
              cl_int*       errcode_ret) {
    typedef cl_kernel (*clCloneKernel_t)(cl_kernel     source_kernel,
              cl_int*       errcode_ret);
    static clCloneKernel_t f;
    if (f == null) { f = (clCloneKernel_t)clBindFunction("clCloneKernel"); }
    return f == null ? ((void*)0) :
        f(source_kernel, errcode_ret);
}

cl_int clRetainKernel(cl_kernel    kernel) {
    typedef cl_int (*clRetainKernel_t)(cl_kernel    kernel);
    static clRetainKernel_t f;
    if (f == null) { f = (clRetainKernel_t)clBindFunction("clRetainKernel"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(kernel);
}

cl_int clReleaseKernel(cl_kernel   kernel) {
    typedef cl_int (*clReleaseKernel_t)(cl_kernel   kernel);
    static clReleaseKernel_t f;
    if (f == null) { f = (clReleaseKernel_t)clBindFunction("clReleaseKernel"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(kernel);
}

cl_int clSetKernelArg(cl_kernel    kernel,
               cl_uint      arg_index,
               size_t       arg_size,
               const void * arg_value) {
    typedef cl_int (*clSetKernelArg_t)(cl_kernel    kernel,
               cl_uint      arg_index,
               size_t       arg_size,
               const void * arg_value);
    static clSetKernelArg_t f;
    if (f == null) { f = (clSetKernelArg_t)clBindFunction("clSetKernelArg"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(kernel, arg_index, arg_size, arg_value);
}

cl_int clSetKernelArgSVMPointer(cl_kernel    kernel,
                         cl_uint      arg_index,
                         const void * arg_value) {
    typedef cl_int (*clSetKernelArgSVMPointer_t)(cl_kernel    kernel,
                         cl_uint      arg_index,
                         const void * arg_value);
    static clSetKernelArgSVMPointer_t f;
    if (f == null) { f = (clSetKernelArgSVMPointer_t)clBindFunction("clSetKernelArgSVMPointer"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(kernel, arg_index, arg_value);
}

cl_int clSetKernelExecInfo(cl_kernel            kernel,
                    cl_kernel_exec_info  param_name,
                    size_t               param_value_size,
                    const void *         param_value) {
    typedef cl_int (*clSetKernelExecInfo_t)(cl_kernel            kernel,
                    cl_kernel_exec_info  param_name,
                    size_t               param_value_size,
                    const void *         param_value);
    static clSetKernelExecInfo_t f;
    if (f == null) { f = (clSetKernelExecInfo_t)clBindFunction("clSetKernelExecInfo"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(kernel, param_name, param_value_size, param_value);
}

cl_int clGetKernelInfo(cl_kernel       kernel,
                cl_kernel_info  param_name,
                size_t          param_value_size,
                void *          param_value,
                size_t *        param_value_size_ret) {
    typedef cl_int (*clGetKernelInfo_t)(cl_kernel       kernel,
                cl_kernel_info  param_name,
                size_t          param_value_size,
                void *          param_value,
                size_t *        param_value_size_ret);
    static clGetKernelInfo_t f;
    if (f == null) { f = (clGetKernelInfo_t)clBindFunction("clGetKernelInfo"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(kernel, param_name, param_value_size, param_value, param_value_size_ret);
}

cl_int clGetKernelArgInfo(cl_kernel       kernel,
                   cl_uint         arg_indx,
                   cl_kernel_arg_info  param_name,
                   size_t          param_value_size,
                   void *          param_value,
                   size_t *        param_value_size_ret) {
    typedef cl_int (*clGetKernelArgInfo_t)(cl_kernel       kernel,
                   cl_uint         arg_indx,
                   cl_kernel_arg_info  param_name,
                   size_t          param_value_size,
                   void *          param_value,
                   size_t *        param_value_size_ret);
    static clGetKernelArgInfo_t f;
    if (f == null) { f = (clGetKernelArgInfo_t)clBindFunction("clGetKernelArgInfo"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(kernel, arg_indx, param_name, param_value_size, param_value, param_value_size_ret);
}

cl_int clGetKernelWorkGroupInfo(cl_kernel                  kernel,
                         cl_device_id               device,
                         cl_kernel_work_group_info  param_name,
                         size_t                     param_value_size,
                         void *                     param_value,
                         size_t *                   param_value_size_ret) {
    typedef cl_int (*clGetKernelWorkGroupInfo_t)(cl_kernel                  kernel,
                         cl_device_id               device,
                         cl_kernel_work_group_info  param_name,
                         size_t                     param_value_size,
                         void *                     param_value,
                         size_t *                   param_value_size_ret);
    static clGetKernelWorkGroupInfo_t f;
    if (f == null) { f = (clGetKernelWorkGroupInfo_t)clBindFunction("clGetKernelWorkGroupInfo"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(kernel, device, param_name, param_value_size, param_value, param_value_size_ret);
}

cl_int clGetKernelSubGroupInfo(cl_kernel                   kernel,
                        cl_device_id                device,
                        cl_kernel_sub_group_info    param_name,
                        size_t                      input_value_size,
                        const void*                 input_value,
                        size_t                      param_value_size,
                        void*                       param_value,
                        size_t*                     param_value_size_ret) {
    typedef cl_int (*clGetKernelSubGroupInfo_t)(cl_kernel                   kernel,
                        cl_device_id                device,
                        cl_kernel_sub_group_info    param_name,
                        size_t                      input_value_size,
                        const void*                 input_value,
                        size_t                      param_value_size,
                        void*                       param_value,
                        size_t*                     param_value_size_ret);
    static clGetKernelSubGroupInfo_t f;
    if (f == null) { f = (clGetKernelSubGroupInfo_t)clBindFunction("clGetKernelSubGroupInfo"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(kernel, device, param_name, input_value_size, input_value, param_value_size, param_value, param_value_size_ret);
}

cl_int clWaitForEvents(cl_uint             num_events,
                const cl_event *    event_list) {
    typedef cl_int (*clWaitForEvents_t)(cl_uint             num_events,
                const cl_event *    event_list);
    static clWaitForEvents_t f;
    if (f == null) { f = (clWaitForEvents_t)clBindFunction("clWaitForEvents"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(num_events, event_list);
}

cl_int clGetEventInfo(cl_event         event,
               cl_event_info    param_name,
               size_t           param_value_size,
               void *           param_value,
               size_t *         param_value_size_ret) {
    typedef cl_int (*clGetEventInfo_t)(cl_event         event,
               cl_event_info    param_name,
               size_t           param_value_size,
               void *           param_value,
               size_t *         param_value_size_ret);
    static clGetEventInfo_t f;
    if (f == null) { f = (clGetEventInfo_t)clBindFunction("clGetEventInfo"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(event, param_name, param_value_size, param_value, param_value_size_ret);
}

cl_event clCreateUserEvent(cl_context    context,
                  cl_int *      errcode_ret) {
    typedef cl_event (*clCreateUserEvent_t)(cl_context    context,
                  cl_int *      errcode_ret);
    static clCreateUserEvent_t f;
    if (f == null) { f = (clCreateUserEvent_t)clBindFunction("clCreateUserEvent"); }
    return f == null ? ((void*)0) :
        f(context, errcode_ret);
}

cl_int clRetainEvent(cl_event event) {
    typedef cl_int (*clRetainEvent_t)(cl_event event);
    static clRetainEvent_t f;
    if (f == null) { f = (clRetainEvent_t)clBindFunction("clRetainEvent"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(event);
}

cl_int clReleaseEvent(cl_event event) {
    typedef cl_int (*clReleaseEvent_t)(cl_event event);
    static clReleaseEvent_t f;
    if (f == null) { f = (clReleaseEvent_t)clBindFunction("clReleaseEvent"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(event);
}

cl_int clSetUserEventStatus(cl_event   event,
                     cl_int     execution_status) {
    typedef cl_int (*clSetUserEventStatus_t)(cl_event   event,
                     cl_int     execution_status);
    static clSetUserEventStatus_t f;
    if (f == null) { f = (clSetUserEventStatus_t)clBindFunction("clSetUserEventStatus"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(event, execution_status);
}

cl_int clSetEventCallback(cl_event    event,
                   cl_int      command_exec_callback_type,
                   void (CL_CALLBACK * pfn_notify)(cl_event event,
                                                   cl_int   event_command_status,
                                                   void *   user_data),
                   void *      user_data) {
    typedef cl_int (*clSetEventCallback_t)(cl_event    event,
                   cl_int      command_exec_callback_type,
                   void (CL_CALLBACK * pfn_notify)(cl_event event,
                                                   cl_int   event_command_status,
                                                   void *   user_data),
                   void *      user_data);
    static clSetEventCallback_t f;
    if (f == null) { f = (clSetEventCallback_t)clBindFunction("clSetEventCallback"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(event, command_exec_callback_type, pfn_notify, user_data);
}

cl_int clGetEventProfilingInfo(cl_event            event,
                        cl_profiling_info   param_name,
                        size_t              param_value_size,
                        void *              param_value,
                        size_t *            param_value_size_ret) {
    typedef cl_int (*clGetEventProfilingInfo_t)(cl_event            event,
                        cl_profiling_info   param_name,
                        size_t              param_value_size,
                        void *              param_value,
                        size_t *            param_value_size_ret);
    static clGetEventProfilingInfo_t f;
    if (f == null) { f = (clGetEventProfilingInfo_t)clBindFunction("clGetEventProfilingInfo"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(event, param_name, param_value_size, param_value, param_value_size_ret);
}

cl_int clFlush(cl_command_queue command_queue) {
    typedef cl_int (*clFlush_t)(cl_command_queue command_queue);
    static clFlush_t f;
    if (f == null) { f = (clFlush_t)clBindFunction("clFlush"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue);
}

cl_int clFinish(cl_command_queue command_queue) {
    typedef cl_int (*clFinish_t)(cl_command_queue command_queue);
    static clFinish_t f;
    if (f == null) { f = (clFinish_t)clBindFunction("clFinish"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue);
}

cl_int clEnqueueReadBuffer(cl_command_queue    command_queue,
                    cl_mem              buffer,
                    cl_bool             blocking_read,
                    size_t              offset,
                    size_t              size,
                    void *              ptr,
                    cl_uint             num_events_in_wait_list,
                    const cl_event *    event_wait_list,
                    cl_event *          event) {
    typedef cl_int (*clEnqueueReadBuffer_t)(cl_command_queue    command_queue,
                    cl_mem              buffer,
                    cl_bool             blocking_read,
                    size_t              offset,
                    size_t              size,
                    void *              ptr,
                    cl_uint             num_events_in_wait_list,
                    const cl_event *    event_wait_list,
                    cl_event *          event);
    static clEnqueueReadBuffer_t f;
    if (f == null) { f = (clEnqueueReadBuffer_t)clBindFunction("clEnqueueReadBuffer"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, buffer, blocking_read, offset, size, ptr, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueReadBufferRect(cl_command_queue    command_queue,
                        cl_mem              buffer,
                        cl_bool             blocking_read,
                        const size_t *      buffer_origin,
                        const size_t *      host_origin,
                        const size_t *      region,
                        size_t              buffer_row_pitch,
                        size_t              buffer_slice_pitch,
                        size_t              host_row_pitch,
                        size_t              host_slice_pitch,
                        void *              ptr,
                        cl_uint             num_events_in_wait_list,
                        const cl_event *    event_wait_list,
                        cl_event *          event) {
    typedef cl_int (*clEnqueueReadBufferRect_t)(cl_command_queue    command_queue,
                        cl_mem              buffer,
                        cl_bool             blocking_read,
                        const size_t *      buffer_origin,
                        const size_t *      host_origin,
                        const size_t *      region,
                        size_t              buffer_row_pitch,
                        size_t              buffer_slice_pitch,
                        size_t              host_row_pitch,
                        size_t              host_slice_pitch,
                        void *              ptr,
                        cl_uint             num_events_in_wait_list,
                        const cl_event *    event_wait_list,
                        cl_event *          event);
    static clEnqueueReadBufferRect_t f;
    if (f == null) { f = (clEnqueueReadBufferRect_t)clBindFunction("clEnqueueReadBufferRect"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, buffer, blocking_read, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueWriteBuffer(cl_command_queue   command_queue,
                     cl_mem             buffer,
                     cl_bool            blocking_write,
                     size_t             offset,
                     size_t             size,
                     const void *       ptr,
                     cl_uint            num_events_in_wait_list,
                     const cl_event *   event_wait_list,
                     cl_event *         event) {
    typedef cl_int (*clEnqueueWriteBuffer_t)(cl_command_queue   command_queue,
                     cl_mem             buffer,
                     cl_bool            blocking_write,
                     size_t             offset,
                     size_t             size,
                     const void *       ptr,
                     cl_uint            num_events_in_wait_list,
                     const cl_event *   event_wait_list,
                     cl_event *         event);
    static clEnqueueWriteBuffer_t f;
    if (f == null) { f = (clEnqueueWriteBuffer_t)clBindFunction("clEnqueueWriteBuffer"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, buffer, blocking_write, offset, size, ptr, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueWriteBufferRect(cl_command_queue    command_queue,
                         cl_mem              buffer,
                         cl_bool             blocking_write,
                         const size_t *      buffer_origin,
                         const size_t *      host_origin,
                         const size_t *      region,
                         size_t              buffer_row_pitch,
                         size_t              buffer_slice_pitch,
                         size_t              host_row_pitch,
                         size_t              host_slice_pitch,
                         const void *        ptr,
                         cl_uint             num_events_in_wait_list,
                         const cl_event *    event_wait_list,
                         cl_event *          event) {
    typedef cl_int (*clEnqueueWriteBufferRect_t)(cl_command_queue    command_queue,
                         cl_mem              buffer,
                         cl_bool             blocking_write,
                         const size_t *      buffer_origin,
                         const size_t *      host_origin,
                         const size_t *      region,
                         size_t              buffer_row_pitch,
                         size_t              buffer_slice_pitch,
                         size_t              host_row_pitch,
                         size_t              host_slice_pitch,
                         const void *        ptr,
                         cl_uint             num_events_in_wait_list,
                         const cl_event *    event_wait_list,
                         cl_event *          event);
    static clEnqueueWriteBufferRect_t f;
    if (f == null) { f = (clEnqueueWriteBufferRect_t)clBindFunction("clEnqueueWriteBufferRect"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, buffer, blocking_write, buffer_origin, host_origin, region, buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueFillBuffer(cl_command_queue   command_queue,
                    cl_mem             buffer,
                    const void *       pattern,
                    size_t             pattern_size,
                    size_t             offset,
                    size_t             size,
                    cl_uint            num_events_in_wait_list,
                    const cl_event *   event_wait_list,
                    cl_event *         event) {
    typedef cl_int (*clEnqueueFillBuffer_t)(cl_command_queue   command_queue,
                    cl_mem             buffer,
                    const void *       pattern,
                    size_t             pattern_size,
                    size_t             offset,
                    size_t             size,
                    cl_uint            num_events_in_wait_list,
                    const cl_event *   event_wait_list,
                    cl_event *         event);
    static clEnqueueFillBuffer_t f;
    if (f == null) { f = (clEnqueueFillBuffer_t)clBindFunction("clEnqueueFillBuffer"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, buffer, pattern, pattern_size, offset, size, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueCopyBuffer(cl_command_queue    command_queue,
                    cl_mem              src_buffer,
                    cl_mem              dst_buffer,
                    size_t              src_offset,
                    size_t              dst_offset,
                    size_t              size,
                    cl_uint             num_events_in_wait_list,
                    const cl_event *    event_wait_list,
                    cl_event *          event) {
    typedef cl_int (*clEnqueueCopyBuffer_t)(cl_command_queue    command_queue,
                    cl_mem              src_buffer,
                    cl_mem              dst_buffer,
                    size_t              src_offset,
                    size_t              dst_offset,
                    size_t              size,
                    cl_uint             num_events_in_wait_list,
                    const cl_event *    event_wait_list,
                    cl_event *          event);
    static clEnqueueCopyBuffer_t f;
    if (f == null) { f = (clEnqueueCopyBuffer_t)clBindFunction("clEnqueueCopyBuffer"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueCopyBufferRect(cl_command_queue    command_queue,
                        cl_mem              src_buffer,
                        cl_mem              dst_buffer,
                        const size_t *      src_origin,
                        const size_t *      dst_origin,
                        const size_t *      region,
                        size_t              src_row_pitch,
                        size_t              src_slice_pitch,
                        size_t              dst_row_pitch,
                        size_t              dst_slice_pitch,
                        cl_uint             num_events_in_wait_list,
                        const cl_event *    event_wait_list,
                        cl_event *          event) {
    typedef cl_int (*clEnqueueCopyBufferRect_t)(cl_command_queue    command_queue,
                        cl_mem              src_buffer,
                        cl_mem              dst_buffer,
                        const size_t *      src_origin,
                        const size_t *      dst_origin,
                        const size_t *      region,
                        size_t              src_row_pitch,
                        size_t              src_slice_pitch,
                        size_t              dst_row_pitch,
                        size_t              dst_slice_pitch,
                        cl_uint             num_events_in_wait_list,
                        const cl_event *    event_wait_list,
                        cl_event *          event);
    static clEnqueueCopyBufferRect_t f;
    if (f == null) { f = (clEnqueueCopyBufferRect_t)clBindFunction("clEnqueueCopyBufferRect"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region, src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueReadImage(cl_command_queue     command_queue,
                   cl_mem               image,
                   cl_bool              blocking_read,
                   const size_t *       origin,
                   const size_t *       region,
                   size_t               row_pitch,
                   size_t               slice_pitch,
                   void *               ptr,
                   cl_uint              num_events_in_wait_list,
                   const cl_event *     event_wait_list,
                   cl_event *           event) {
    typedef cl_int (*clEnqueueReadImage_t)(cl_command_queue     command_queue,
                   cl_mem               image,
                   cl_bool              blocking_read,
                   const size_t *       origin,
                   const size_t *       region,
                   size_t               row_pitch,
                   size_t               slice_pitch,
                   void *               ptr,
                   cl_uint              num_events_in_wait_list,
                   const cl_event *     event_wait_list,
                   cl_event *           event);
    static clEnqueueReadImage_t f;
    if (f == null) { f = (clEnqueueReadImage_t)clBindFunction("clEnqueueReadImage"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, ptr, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueWriteImage(cl_command_queue    command_queue,
                    cl_mem              image,
                    cl_bool             blocking_write,
                    const size_t *      origin,
                    const size_t *      region,
                    size_t              input_row_pitch,
                    size_t              input_slice_pitch,
                    const void *        ptr,
                    cl_uint             num_events_in_wait_list,
                    const cl_event *    event_wait_list,
                    cl_event *          event) {
    typedef cl_int (*clEnqueueWriteImage_t)(cl_command_queue    command_queue,
                    cl_mem              image,
                    cl_bool             blocking_write,
                    const size_t *      origin,
                    const size_t *      region,
                    size_t              input_row_pitch,
                    size_t              input_slice_pitch,
                    const void *        ptr,
                    cl_uint             num_events_in_wait_list,
                    const cl_event *    event_wait_list,
                    cl_event *          event);
    static clEnqueueWriteImage_t f;
    if (f == null) { f = (clEnqueueWriteImage_t)clBindFunction("clEnqueueWriteImage"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, image, blocking_write, origin, region, input_row_pitch, input_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueFillImage(cl_command_queue   command_queue,
                   cl_mem             image,
                   const void *       fill_color,
                   const size_t *     origin,
                   const size_t *     region,
                   cl_uint            num_events_in_wait_list,
                   const cl_event *   event_wait_list,
                   cl_event *         event) {
    typedef cl_int (*clEnqueueFillImage_t)(cl_command_queue   command_queue,
                   cl_mem             image,
                   const void *       fill_color,
                   const size_t *     origin,
                   const size_t *     region,
                   cl_uint            num_events_in_wait_list,
                   const cl_event *   event_wait_list,
                   cl_event *         event);
    static clEnqueueFillImage_t f;
    if (f == null) { f = (clEnqueueFillImage_t)clBindFunction("clEnqueueFillImage"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, image, fill_color, origin, region, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueCopyImage(cl_command_queue     command_queue,
                   cl_mem               src_image,
                   cl_mem               dst_image,
                   const size_t *       src_origin,
                   const size_t *       dst_origin,
                   const size_t *       region,
                   cl_uint              num_events_in_wait_list,
                   const cl_event *     event_wait_list,
                   cl_event *           event) {
    typedef cl_int (*clEnqueueCopyImage_t)(cl_command_queue     command_queue,
                   cl_mem               src_image,
                   cl_mem               dst_image,
                   const size_t *       src_origin,
                   const size_t *       dst_origin,
                   const size_t *       region,
                   cl_uint              num_events_in_wait_list,
                   const cl_event *     event_wait_list,
                   cl_event *           event);
    static clEnqueueCopyImage_t f;
    if (f == null) { f = (clEnqueueCopyImage_t)clBindFunction("clEnqueueCopyImage"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, src_image, dst_image, src_origin, dst_origin, region, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueCopyImageToBuffer(cl_command_queue command_queue,
                           cl_mem           src_image,
                           cl_mem           dst_buffer,
                           const size_t *   src_origin,
                           const size_t *   region,
                           size_t           dst_offset,
                           cl_uint          num_events_in_wait_list,
                           const cl_event * event_wait_list,
                           cl_event *       event) {
    typedef cl_int (*clEnqueueCopyImageToBuffer_t)(cl_command_queue command_queue,
                           cl_mem           src_image,
                           cl_mem           dst_buffer,
                           const size_t *   src_origin,
                           const size_t *   region,
                           size_t           dst_offset,
                           cl_uint          num_events_in_wait_list,
                           const cl_event * event_wait_list,
                           cl_event *       event);
    static clEnqueueCopyImageToBuffer_t f;
    if (f == null) { f = (clEnqueueCopyImageToBuffer_t)clBindFunction("clEnqueueCopyImageToBuffer"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, src_image, dst_buffer, src_origin, region, dst_offset, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueCopyBufferToImage(cl_command_queue command_queue,
                           cl_mem           src_buffer,
                           cl_mem           dst_image,
                           size_t           src_offset,
                           const size_t *   dst_origin,
                           const size_t *   region,
                           cl_uint          num_events_in_wait_list,
                           const cl_event * event_wait_list,
                           cl_event *       event) {
    typedef cl_int (*clEnqueueCopyBufferToImage_t)(cl_command_queue command_queue,
                           cl_mem           src_buffer,
                           cl_mem           dst_image,
                           size_t           src_offset,
                           const size_t *   dst_origin,
                           const size_t *   region,
                           cl_uint          num_events_in_wait_list,
                           const cl_event * event_wait_list,
                           cl_event *       event);
    static clEnqueueCopyBufferToImage_t f;
    if (f == null) { f = (clEnqueueCopyBufferToImage_t)clBindFunction("clEnqueueCopyBufferToImage"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, src_buffer, dst_image, src_offset, dst_origin, region, num_events_in_wait_list, event_wait_list, event);
}

void * clEnqueueMapBuffer(cl_command_queue command_queue,
                   cl_mem           buffer,
                   cl_bool          blocking_map,
                   cl_map_flags     map_flags,
                   size_t           offset,
                   size_t           size,
                   cl_uint          num_events_in_wait_list,
                   const cl_event * event_wait_list,
                   cl_event *       event,
                   cl_int *         errcode_ret) {
    typedef void * (*clEnqueueMapBuffer_t)(cl_command_queue command_queue,
                   cl_mem           buffer,
                   cl_bool          blocking_map,
                   cl_map_flags     map_flags,
                   size_t           offset,
                   size_t           size,
                   cl_uint          num_events_in_wait_list,
                   const cl_event * event_wait_list,
                   cl_event *       event,
                   cl_int *         errcode_ret);
    static clEnqueueMapBuffer_t f;
    if (f == null) { f = (clEnqueueMapBuffer_t)clBindFunction("clEnqueueMapBuffer"); }
    return f == null ? ((void*)0) :
        f(command_queue, buffer, blocking_map, map_flags, offset, size, num_events_in_wait_list, event_wait_list, event, errcode_ret);
}

void * clEnqueueMapImage(cl_command_queue  command_queue,
                  cl_mem            image,
                  cl_bool           blocking_map,
                  cl_map_flags      map_flags,
                  const size_t *    origin,
                  const size_t *    region,
                  size_t *          image_row_pitch,
                  size_t *          image_slice_pitch,
                  cl_uint           num_events_in_wait_list,
                  const cl_event *  event_wait_list,
                  cl_event *        event,
                  cl_int *          errcode_ret) {
    typedef void * (*clEnqueueMapImage_t)(cl_command_queue  command_queue,
                  cl_mem            image,
                  cl_bool           blocking_map,
                  cl_map_flags      map_flags,
                  const size_t *    origin,
                  const size_t *    region,
                  size_t *          image_row_pitch,
                  size_t *          image_slice_pitch,
                  cl_uint           num_events_in_wait_list,
                  const cl_event *  event_wait_list,
                  cl_event *        event,
                  cl_int *          errcode_ret);
    static clEnqueueMapImage_t f;
    if (f == null) { f = (clEnqueueMapImage_t)clBindFunction("clEnqueueMapImage"); }
    return f == null ? ((void*)0) :
        f(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch, image_slice_pitch, num_events_in_wait_list, event_wait_list, event, errcode_ret);
}

cl_int clEnqueueUnmapMemObject(cl_command_queue command_queue,
                        cl_mem           memobj,
                        void *           mapped_ptr,
                        cl_uint          num_events_in_wait_list,
                        const cl_event * event_wait_list,
                        cl_event *       event) {
    typedef cl_int (*clEnqueueUnmapMemObject_t)(cl_command_queue command_queue,
                        cl_mem           memobj,
                        void *           mapped_ptr,
                        cl_uint          num_events_in_wait_list,
                        const cl_event * event_wait_list,
                        cl_event *       event);
    static clEnqueueUnmapMemObject_t f;
    if (f == null) { f = (clEnqueueUnmapMemObject_t)clBindFunction("clEnqueueUnmapMemObject"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, memobj, mapped_ptr, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueMigrateMemObjects(cl_command_queue       command_queue,
                           cl_uint                num_mem_objects,
                           const cl_mem *         mem_objects,
                           cl_mem_migration_flags flags,
                           cl_uint                num_events_in_wait_list,
                           const cl_event *       event_wait_list,
                           cl_event *             event) {
    typedef cl_int (*clEnqueueMigrateMemObjects_t)(cl_command_queue       command_queue,
                           cl_uint                num_mem_objects,
                           const cl_mem *         mem_objects,
                           cl_mem_migration_flags flags,
                           cl_uint                num_events_in_wait_list,
                           const cl_event *       event_wait_list,
                           cl_event *             event);
    static clEnqueueMigrateMemObjects_t f;
    if (f == null) { f = (clEnqueueMigrateMemObjects_t)clBindFunction("clEnqueueMigrateMemObjects"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueNDRangeKernel(cl_command_queue command_queue,
                       cl_kernel        kernel,
                       cl_uint          work_dim,
                       const size_t *   global_work_offset,
                       const size_t *   global_work_size,
                       const size_t *   local_work_size,
                       cl_uint          num_events_in_wait_list,
                       const cl_event * event_wait_list,
                       cl_event *       event) {
    typedef cl_int (*clEnqueueNDRangeKernel_t)(cl_command_queue command_queue,
                       cl_kernel        kernel,
                       cl_uint          work_dim,
                       const size_t *   global_work_offset,
                       const size_t *   global_work_size,
                       const size_t *   local_work_size,
                       cl_uint          num_events_in_wait_list,
                       const cl_event * event_wait_list,
                       cl_event *       event);
    static clEnqueueNDRangeKernel_t f;
    if (f == null) { f = (clEnqueueNDRangeKernel_t)clBindFunction("clEnqueueNDRangeKernel"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueNativeKernel(cl_command_queue  command_queue,
                      void (CL_CALLBACK * user_func)(void *),
                      void *            args,
                      size_t            cb_args,
                      cl_uint           num_mem_objects,
                      const cl_mem *    mem_list,
                      const void **     args_mem_loc,
                      cl_uint           num_events_in_wait_list,
                      const cl_event *  event_wait_list,
                      cl_event *        event) {
    typedef cl_int (*clEnqueueNativeKernel_t)(cl_command_queue  command_queue,
                      void (CL_CALLBACK * user_func)(void *),
                      void *            args,
                      size_t            cb_args,
                      cl_uint           num_mem_objects,
                      const cl_mem *    mem_list,
                      const void **     args_mem_loc,
                      cl_uint           num_events_in_wait_list,
                      const cl_event *  event_wait_list,
                      cl_event *        event);
    static clEnqueueNativeKernel_t f;
    if (f == null) { f = (clEnqueueNativeKernel_t)clBindFunction("clEnqueueNativeKernel"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueMarkerWithWaitList(cl_command_queue  command_queue,
                            cl_uint           num_events_in_wait_list,
                            const cl_event *  event_wait_list,
                            cl_event *        event) {
    typedef cl_int (*clEnqueueMarkerWithWaitList_t)(cl_command_queue  command_queue,
                            cl_uint           num_events_in_wait_list,
                            const cl_event *  event_wait_list,
                            cl_event *        event);
    static clEnqueueMarkerWithWaitList_t f;
    if (f == null) { f = (clEnqueueMarkerWithWaitList_t)clBindFunction("clEnqueueMarkerWithWaitList"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueBarrierWithWaitList(cl_command_queue  command_queue,
                             cl_uint           num_events_in_wait_list,
                             const cl_event *  event_wait_list,
                             cl_event *        event) {
    typedef cl_int (*clEnqueueBarrierWithWaitList_t)(cl_command_queue  command_queue,
                             cl_uint           num_events_in_wait_list,
                             const cl_event *  event_wait_list,
                             cl_event *        event);
    static clEnqueueBarrierWithWaitList_t f;
    if (f == null) { f = (clEnqueueBarrierWithWaitList_t)clBindFunction("clEnqueueBarrierWithWaitList"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueSVMFree(cl_command_queue  command_queue,
                 cl_uint           num_svm_pointers,
                 void *            svm_pointers[],
                 void (CL_CALLBACK * pfn_free_func)(cl_command_queue queue,
                                                    cl_uint          num_svm_pointers,
                                                    void *           svm_pointers[],
                                                    void *           user_data),
                 void *            user_data,
                 cl_uint           num_events_in_wait_list,
                 const cl_event *  event_wait_list,
                 cl_event *        event) {
    typedef cl_int (*clEnqueueSVMFree_t)(cl_command_queue  command_queue,
                 cl_uint           num_svm_pointers,
                 void *            svm_pointers[],
                 void (CL_CALLBACK * pfn_free_func)(cl_command_queue queue,
                                                    cl_uint          num_svm_pointers,
                                                    void *           svm_pointers[],
                                                    void *           user_data),
                 void *            user_data,
                 cl_uint           num_events_in_wait_list,
                 const cl_event *  event_wait_list,
                 cl_event *        event);
    static clEnqueueSVMFree_t f;
    if (f == null) { f = (clEnqueueSVMFree_t)clBindFunction("clEnqueueSVMFree"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueSVMMemcpy(cl_command_queue  command_queue,
                   cl_bool           blocking_copy,
                   void *            dst_ptr,
                   const void *      src_ptr,
                   size_t            size,
                   cl_uint           num_events_in_wait_list,
                   const cl_event *  event_wait_list,
                   cl_event *        event) {
    typedef cl_int (*clEnqueueSVMMemcpy_t)(cl_command_queue  command_queue,
                   cl_bool           blocking_copy,
                   void *            dst_ptr,
                   const void *      src_ptr,
                   size_t            size,
                   cl_uint           num_events_in_wait_list,
                   const cl_event *  event_wait_list,
                   cl_event *        event);
    static clEnqueueSVMMemcpy_t f;
    if (f == null) { f = (clEnqueueSVMMemcpy_t)clBindFunction("clEnqueueSVMMemcpy"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueSVMMemFill(cl_command_queue  command_queue,
                    void *            svm_ptr,
                    const void *      pattern,
                    size_t            pattern_size,
                    size_t            size,
                    cl_uint           num_events_in_wait_list,
                    const cl_event *  event_wait_list,
                    cl_event *        event) {
    typedef cl_int (*clEnqueueSVMMemFill_t)(cl_command_queue  command_queue,
                    void *            svm_ptr,
                    const void *      pattern,
                    size_t            pattern_size,
                    size_t            size,
                    cl_uint           num_events_in_wait_list,
                    const cl_event *  event_wait_list,
                    cl_event *        event);
    static clEnqueueSVMMemFill_t f;
    if (f == null) { f = (clEnqueueSVMMemFill_t)clBindFunction("clEnqueueSVMMemFill"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueSVMMap(cl_command_queue  command_queue,
                cl_bool           blocking_map,
                cl_map_flags      flags,
                void *            svm_ptr,
                size_t            size,
                cl_uint           num_events_in_wait_list,
                const cl_event *  event_wait_list,
                cl_event *        event) {
    typedef cl_int (*clEnqueueSVMMap_t)(cl_command_queue  command_queue,
                cl_bool           blocking_map,
                cl_map_flags      flags,
                void *            svm_ptr,
                size_t            size,
                cl_uint           num_events_in_wait_list,
                const cl_event *  event_wait_list,
                cl_event *        event);
    static clEnqueueSVMMap_t f;
    if (f == null) { f = (clEnqueueSVMMap_t)clBindFunction("clEnqueueSVMMap"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueSVMUnmap(cl_command_queue  command_queue,
                  void *            svm_ptr,
                  cl_uint           num_events_in_wait_list,
                  const cl_event *  event_wait_list,
                  cl_event *        event) {
    typedef cl_int (*clEnqueueSVMUnmap_t)(cl_command_queue  command_queue,
                  void *            svm_ptr,
                  cl_uint           num_events_in_wait_list,
                  const cl_event *  event_wait_list,
                  cl_event *        event);
    static clEnqueueSVMUnmap_t f;
    if (f == null) { f = (clEnqueueSVMUnmap_t)clBindFunction("clEnqueueSVMUnmap"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, svm_ptr, num_events_in_wait_list, event_wait_list, event);
}

cl_int clEnqueueSVMMigrateMem(cl_command_queue         command_queue,
                       cl_uint                  num_svm_pointers,
                       const void **            svm_pointers,
                       const size_t *           sizes,
                       cl_mem_migration_flags   flags,
                       cl_uint                  num_events_in_wait_list,
                       const cl_event *         event_wait_list,
                       cl_event *               event) {
    typedef cl_int (*clEnqueueSVMMigrateMem_t)(cl_command_queue         command_queue,
                       cl_uint                  num_svm_pointers,
                       const void **            svm_pointers,
                       const size_t *           sizes,
                       cl_mem_migration_flags   flags,
                       cl_uint                  num_events_in_wait_list,
                       const cl_event *         event_wait_list,
                       cl_event *               event);
    static clEnqueueSVMMigrateMem_t f;
    if (f == null) { f = (clEnqueueSVMMigrateMem_t)clBindFunction("clEnqueueSVMMigrateMem"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, num_svm_pointers, svm_pointers, sizes, flags, num_events_in_wait_list, event_wait_list, event);
}

void * clGetExtensionFunctionAddressForPlatform(cl_platform_id platform,
                                         const char *   func_name) {
    typedef void * (*clGetExtensionFunctionAddressForPlatform_t)(cl_platform_id platform,
                                         const char *   func_name);
    static clGetExtensionFunctionAddressForPlatform_t f;
    if (f == null) { f = (clGetExtensionFunctionAddressForPlatform_t)clBindFunction("clGetExtensionFunctionAddressForPlatform"); }
    return f == null ? ((void*)0) :
        f(platform, func_name);
}

cl_int clSetCommandQueueProperty(cl_command_queue              command_queue,
                              cl_command_queue_properties   properties,
                              cl_bool                       enable,
                              cl_command_queue_properties * old_properties) {
    typedef cl_int (*clSetCommandQueueProperty_t)(cl_command_queue              command_queue,
                              cl_command_queue_properties   properties,
                              cl_bool                       enable,
                              cl_command_queue_properties * old_properties);
    static clSetCommandQueueProperty_t f;
    if (f == null) { f = (clSetCommandQueueProperty_t)clBindFunction("clSetCommandQueueProperty"); }
    return f == null ? CL_FUNCTION_NOT_IMPLEMENTED :
        f(command_queue, properties, enable, old_properties);
}

